name: Task Grader - Garage

on:
  push:

permissions:
  checks: write
  actions: write
  contents: write

jobs:
  Ejecucion-de-Pruebas:
    runs-on: ubuntu-latest
    if: github.actor != 'github-classroom[bot]'
    outputs:
      prueba-de-Garage-add-score: ${{ steps.set-env-vars.outputs.PRUEBA_DE_GARAGE_ADD_SCORE_RESULT }}
      prueba-de-Garage-remove-score: ${{ steps.set-env-vars.outputs.PRUEBA_DE_GARAGE_REMOVE_SCORE_RESULT }}
      prueba-de-Garage-getVehicles-score: ${{ steps.set-env-vars.outputs.PRUEBA_DE_GARAGE_GETVEHICLES_SCORE_RESULT }}
      prueba-de-Garage-getOlderThan-score: ${{ steps.set-env-vars.outputs.PRUEBA_DE_GARAGE_GETOLDERTHAN_SCORE_RESULT }}
      prueba-de-Garage-getMostUsed-score: ${{ steps.set-env-vars.outputs.PRUEBA_DE_GARAGE_GETMOSTUSED_SCORE_RESULT }}
      final-score: ${{ steps.set-env-vars.outputs.FINAL_SCORE }}
    steps:
      - name: Preparación de las pruebas
        uses: actions/checkout@v4

      - name: Prueba de Garage.add
        id: prueba-de-Garage-add
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Prueba de Garage.add
          setup-command: npm i
          command: npm test garage.add
          timeout: 10
          max-score: 25

      - name: Prueba de Garage.remove
        id: prueba-de-Garage-remove
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Prueba de Garage.remove
          setup-command: ""
          command: npm test garage.remove
          timeout: 10
          max-score: 25

      - name: Prueba de Garage.getVehicles
        id: prueba-de-Garage-getVehicles
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Prueba de Garage.getVehicles
          setup-command: ""
          command: npm test garage.getVehicles
          timeout: 10
          max-score: 20

      - name: Prueba de Garage.getOlderThan
        id: prueba-de-Garage-getOlderThan
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Prueba de Garage.getOlderThan
          setup-command: ""
          command: npm test garage.getOlderThan
          timeout: 10
          max-score: 20

      - name: Prueba de Garage.getMostUsed
        id: prueba-de-Garage-getMostUsed
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Prueba de Garage.getMostUsed
          setup-command: ""
          command: npm test garage.getMostUsed
          timeout: 10
          max-score: 10

      - name: Preparación de resultados
        id: set-env-vars
        run: |
          # Decode and set score for Prueba de Garage.add
          PRUEBA_DE_GARAGE_ADD_RESULTS=$(echo "${{ steps.prueba-de-Garage-add.outputs.result }}" | base64 --decode)
          PRUEBA_DE_GARAGE_ADD_SCORE=$(echo "$PRUEBA_DE_GARAGE_ADD_RESULTS" | jq '.tests[0].score')
          PRUEBA_DE_GARAGE_ADD_MAX_SCORE=$(echo "$PRUEBA_DE_GARAGE_ADD_RESULTS" | jq '.max_score')
          PRUEBA_DE_GARAGE_ADD_SCORE_RESULT="${PRUEBA_DE_GARAGE_ADD_SCORE}/${PRUEBA_DE_GARAGE_ADD_MAX_SCORE}"
          echo "PRUEBA_DE_GARAGE_ADD_SCORE_RESULT=$PRUEBA_DE_GARAGE_ADD_SCORE_RESULT" >> "$GITHUB_OUTPUT"

          # Decode and set score for Prueba de Garage.remove
          PRUEBA_DE_GARAGE_REMOVE_RESULTS=$(echo "${{ steps.prueba-de-Garage-remove.outputs.result }}" | base64 --decode)
          PRUEBA_DE_GARAGE_REMOVE_SCORE=$(echo "$PRUEBA_DE_GARAGE_REMOVE_RESULTS" | jq '.tests[0].score')
          PRUEBA_DE_GARAGE_REMOVE_MAX_SCORE=$(echo "$PRUEBA_DE_GARAGE_REMOVE_RESULTS" | jq '.max_score')
          PRUEBA_DE_GARAGE_REMOVE_SCORE_RESULT="${PRUEBA_DE_GARAGE_REMOVE_SCORE}/${PRUEBA_DE_GARAGE_REMOVE_MAX_SCORE}"
          echo "PRUEBA_DE_GARAGE_REMOVE_SCORE_RESULT=$PRUEBA_DE_GARAGE_REMOVE_SCORE_RESULT" >> "$GITHUB_OUTPUT"

          # Decode and set score for Prueba de Garage.getVehicles
          PRUEBA_DE_GARAGE_GETVEHICLES_RESULTS=$(echo "${{ steps.prueba-de-Garage-getVehicles.outputs.result }}" | base64 --decode)
          PRUEBA_DE_GARAGE_GETVEHICLES_SCORE=$(echo "$PRUEBA_DE_GARAGE_GETVEHICLES_RESULTS" | jq '.tests[0].score')
          PRUEBA_DE_GARAGE_GETVEHICLES_MAX_SCORE=$(echo "$PRUEBA_DE_GARAGE_GETVEHICLES_RESULTS" | jq '.max_score')
          PRUEBA_DE_GARAGE_GETVEHICLES_SCORE_RESULT="${PRUEBA_DE_GARAGE_GETVEHICLES_SCORE}/${PRUEBA_DE_GARAGE_GETVEHICLES_MAX_SCORE}"
          echo "PRUEBA_DE_GARAGE_GETVEHICLES_SCORE_RESULT=$PRUEBA_DE_GARAGE_GETVEHICLES_SCORE_RESULT" >> "$GITHUB_OUTPUT"

          # Decode and set score for Prueba de Garage.getOlderThan
          PRUEBA_DE_GARAGE_GETOLDERTHAN_RESULTS=$(echo "${{ steps.prueba-de-Garage-getOlderThan.outputs.result }}" | base64 --decode)
          PRUEBA_DE_GARAGE_GETOLDERTHAN_SCORE=$(echo "$PRUEBA_DE_GARAGE_GETOLDERTHAN_RESULTS" | jq '.tests[0].score')
          PRUEBA_DE_GARAGE_GETOLDERTHAN_MAX_SCORE=$(echo "$PRUEBA_DE_GARAGE_GETOLDERTHAN_RESULTS" | jq '.max_score')
          PRUEBA_DE_GARAGE_GETOLDERTHAN_SCORE_RESULT="${PRUEBA_DE_GARAGE_GETOLDERTHAN_SCORE}/${PRUEBA_DE_GARAGE_GETOLDERTHAN_MAX_SCORE}"
          echo "PRUEBA_DE_GARAGE_GETOLDERTHAN_SCORE_RESULT=$PRUEBA_DE_GARAGE_GETOLDERTHAN_SCORE_RESULT" >> "$GITHUB_OUTPUT"

          # Decode and set score for Prueba de Garage.getMostUsed
          PRUEBA_DE_GARAGE_GETMOSTUSED_RESULTS=$(echo "${{ steps.prueba-de-Garage-getMostUsed.outputs.result }}" | base64 --decode)
          PRUEBA_DE_GARAGE_GETMOSTUSED_SCORE=$(echo "$PRUEBA_DE_GARAGE_GETMOSTUSED_RESULTS" | jq '.tests[0].score')
          PRUEBA_DE_GARAGE_GETMOSTUSED_MAX_SCORE=$(echo "$PRUEBA_DE_GARAGE_GETMOSTUSED_RESULTS" | jq '.max_score')
          PRUEBA_DE_GARAGE_GETMOSTUSED_SCORE_RESULT="${PRUEBA_DE_GARAGE_GETMOSTUSED_SCORE}/${PRUEBA_DE_GARAGE_GETMOSTUSED_MAX_SCORE}"
          echo "PRUEBA_DE_GARAGE_GETMOSTUSED_SCORE_RESULT=$PRUEBA_DE_GARAGE_GETMOSTUSED_SCORE_RESULT" >> "$GITHUB_OUTPUT"

          # Calculate total score
          TOTAL_SCORE=$(echo "$PRUEBA_DE_GARAGE_ADD_SCORE + $PRUEBA_DE_GARAGE_REMOVE_SCORE + $PRUEBA_DE_GARAGE_GETVEHICLES_SCORE + $PRUEBA_DE_GARAGE_GETOLDERTHAN_SCORE + $PRUEBA_DE_GARAGE_GETMOSTUSED_SCORE" | bc)
          MAX_SCORE=$(echo "$PRUEBA_DE_GARAGE_ADD_MAX_SCORE + $PRUEBA_DE_GARAGE_REMOVE_MAX_SCORE + $PRUEBA_DE_GARAGE_GETVEHICLES_MAX_SCORE + $PRUEBA_DE_GARAGE_GETOLDERTHAN_MAX_SCORE + $PRUEBA_DE_GARAGE_GETMOSTUSED_MAX_SCORE" | bc)
          FINAL_SCORE="${TOTAL_SCORE}/${MAX_SCORE}"
          echo "FINAL_SCORE=$FINAL_SCORE" >> "$GITHUB_OUTPUT"
      - name: Reporte de resultados
        uses: classroom-resources/autograding-grading-reporter@v1
        env:
          PRUEBA-DE-GARAGE-ADD_RESULTS: "${{steps.prueba-de-Garage-add.outputs.result}}"
          PRUEBA-DE-GARAGE-REMOVE_RESULTS: "${{steps.prueba-de-Garage-remove.outputs.result}}"
          PRUEBA-DE-GARAGE-GETVEHICLES_RESULTS: "${{steps.prueba-de-Garage-getVehicles.outputs.result}}"
          PRUEBA-DE-GARAGE-GETOLDERTHAN_RESULTS: "${{steps.prueba-de-Garage-getOlderThan.outputs.result}}"
          PRUEBA-DE-GARAGE-GETMOSTUSED_RESULTS: "${{steps.prueba-de-Garage-getMostUsed.outputs.result}}"
        with:
          runners: prueba-de-Garage-add,prueba-de-Garage-remove,prueba-de-Garage-getVehicles,prueba-de-Garage-getOlderThan,prueba-de-Garage-getMostUsed

  Publicacion-de-insignias:
    name: Publicación de insignias
    runs-on: ubuntu-latest
    if: always()
    needs: Ejecucion-de-Pruebas
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Preparando rama para publicación de resultados
        run: git checkout badges 2>/dev/null || git checkout -b badges

      - name: Creación directorio para insignias
        run: mkdir -p .github/badges... # Crear puntos bar para cada función
      - name: Creación insignia para Prueba de Garage.add
        uses: markpatterson27/points-bar@v1
        with:
          points: ${{ needs.Ejecucion-de-Pruebas.outputs.prueba-de-Garage-add-score }}
          path: ".github/badges/points-label1.svg"
          type: "badge"
          label: "puntos"

      - name: Creación insignia para Prueba de Garage.remove
        uses: markpatterson27/points-bar@v1
        with:
          points: ${{ needs.Ejecucion-de-Pruebas.outputs.prueba-de-Garage-remove-score }}
          path: ".github/badges/points-label2.svg"
          type: "badge"
          label: "puntos"

      - name: Creación insignia para Prueba de Garage.getVehicles
        uses: markpatterson27/points-bar@v1
        with:
          points: ${{ needs.Ejecucion-de-Pruebas.outputs.prueba-de-Garage-getVehicles-score }}
          path: ".github/badges/points-label3.svg"
          type: "badge"
          label: "puntos"

      - name: Creación insignia para Prueba de Garage.getOlderThan
        uses: markpatterson27/points-bar@v1
        with:
          points: ${{ needs.Ejecucion-de-Pruebas.outputs.prueba-de-Garage-getOlderThan-score }}
          path: ".github/badges/points-label4.svg"
          type: "badge"
          label: "puntos"

      - name: Creación insignia para Prueba de Garage.getMostUsed
        uses: markpatterson27/points-bar@v1
        with:
          points: ${{ needs.Ejecucion-de-Pruebas.outputs.prueba-de-Garage-getMostUsed-score }}
          path: ".github/badges/points-label5.svg"
          type: "badge"
          label: "puntos"

      - name: Creación insignia para calificación total
        uses: markpatterson27/points-bar@v1
        with:
          points: ${{ needs.Ejecucion-de-Pruebas.outputs.final-score }}
          path: ".github/badges/points-label0.svg"
          type: "badge"
          label: "Total"

      # Publicar insignias
      - name: Publicación de insignias
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .github/badges/*.svg
          git commit -m "Publicación de resultados" || echo "Sin cambios para publicar"
          git push origin badges
